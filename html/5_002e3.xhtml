<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
      Estrutura e Interpretação de Programas de Computador, 2ª edição: 5.3
    </title>
    <meta
      name="description"
      content="Estrutura e Interpretação de Programas de Computador, 2ª edição: 5.3"
    />
    <meta
      name="keywords"
      content="Estrutura e Interpretação de Programas de Computador, 2ª edição: 5.3"
    />
    <link rel="stylesheet" href="css/style.css" />
    <link rel="stylesheet" href="css/prettify.css" />
    <script src="js/jquery.min.js"></script>
    <script src="js/footnotes.js"></script>
    <script src="js/browsertest.js"></script>
  </head>
  <body>
    <section>
      <a id="pagetop"></a>
      <a id="g_t5_002e3"></a>
      <nav class="header">
        <p>
          Próximo:
          <a href="5_002e4.xhtml#g_t5_002e4" accesskey="n" rel="next">5.4</a>,
          Anterior:
          <a href="5_002e2.xhtml#g_t5_002e2" accesskey="p" rel="prev">5.2</a>,
          Acima:
          <a href="Chapter-5.xhtml#Chapter-5" accesskey="u" rel="prev"
            >Capítulo 5</a
          >
          [<a
            href="index.xhtml#SEC_Contents"
            title="Índice"
            accesskey="c"
            rel="contents"
            >Conteúdo</a
          >]
        </p>
      </nav>
      <a id="Storage-Allocation-and-Garbage-Collection"></a>
      <h3 class="section">
        <span class="secnum">5.3</span
        ><span class="sectitle">Alocação de Memória e Coleta de Lixo</span>
      </h3>

      <p>
        Na seção <a href="5_002e4.xhtml#g_t5_002e4">5.4</a>, mostraremos como
        implementar um avaliador de Scheme como uma máquina de registradores.
        Para simplificar a discussão, assumiremos que nossas máquinas de
        registradores podem ser equipadas com uma
        <a id="index-list_002dstructured-memory"></a
        ><em>memória estruturada em listas</em>, na qual as operações básicas
        para manipular dados estruturados em listas são primitivas. Postular a
        existência de tal memória é uma abstração útil quando se está focando
        nos mecanismos de controle em um interpretador de Scheme, mas isso não
        reflete uma visão realista das operações primitivas de dados de
        computadores contemporâneos. Para obter uma visão mais completa de como
        um sistema Lisp opera, devemos investigar como a estrutura de lista pode
        ser representada de uma forma compatível com as memórias convencionais
        de computadores.
      </p>
      <p>
        Há duas considerações na implementação da estrutura de lista. A primeira
        é puramente uma questão de representação: como representar a estrutura
        de "caixa e ponteiro" dos pares de Lisp, usando apenas as capacidades de
        armazenamento e endereçamento das memórias típicas de computadores. A
        segunda questão diz respeito ao gerenciamento da memória à medida que
        uma computação prossegue. A operação de um sistema Lisp depende
        crucialmente da capacidade de criar continuamente novos objetos de
        dados. Esses incluem objetos que são explicitamente criados pelos
        procedimentos Lisp sendo interpretados, bem como estruturas criadas pelo
        próprio interpretador, como ambientes e listas de argumentos. Embora a
        criação constante de novos objetos de dados não represente um problema
        em um computador com uma quantidade infinita de memória rapidamente
        endereçável, as memórias de computadores estão disponíveis apenas em
        tamanhos finitos (infelizmente). Os sistemas Lisp, portanto, fornecem
        uma <a id="index-automatic-storage-allocation"></a
        ><em>facilidade de alocação automática de memória</em> para suportar a
        ilusão de uma memória infinita. Quando um objeto de dados não é mais
        necessário, a memória alocada para ele é automaticamente reciclada e
        usada para construir novos objetos de dados. Existem várias técnicas
        para fornecer tal alocação automática de memória. O método que
        discutiremos nesta seção é chamado de
        <a id="index-garbage-collection"></a><em>coleta de lixo</em>.
      </p>

      <a id="g_t5_002e3_002e1"></a>
      <a id="Memory-as-Vectors"></a>
      <h4 class="subsection">
        <span class="secnum">5.3.1</span
        ><span class="sectitle">Memória como Vetores</span>
      </h4>

      <p>
        Uma memória de computador convencional pode ser pensada como um array de
        compartimentos, cada um dos quais pode conter uma peça de informação.
        Cada compartimento tem um nome único, chamado de
        <a id="index-address"></a><em>endereço</em> ou
        <a id="index-location"></a><em>localização</em>. Sistemas de memória
        típicos fornecem duas operações primitivas: uma que busca os dados
        armazenados em uma localização especificada e outra que atribui novos
        dados a uma localização especificada. Endereços de memória podem ser
        incrementados para suportar acesso sequencial a algum conjunto dos
        compartimentos. De forma mais geral, muitas operações importantes de
        dados exigem que endereços de memória sejam tratados como dados, que
        podem ser armazenados em localizações de memória e manipulados em
        registradores de máquina. A representação da estrutura de lista é uma
        aplicação de tal <a id="index-address-arithmetic"></a
        ><em>aritmética de endereço</em>.
      </p>
      <p>
        Para modelar a memória do computador, usamos um novo tipo de estrutura
        de dados chamada <a id="index-vector"></a><em>vetor</em>. Abstratamente,
        um vetor é um objeto de dados composto cujos elementos individuais podem
        ser acessados por meio de um índice inteiro em um tempo que é
        independente do índice.<a
          class="footnote_link"
          id="DOCF290"
          href="#FOOT290"
          ><sup>290</sup></a
        >
        Para descrever operações de memória, usamos dois procedimentos Scheme
        primitivos para manipular vetores:
      </p>
      <ul>
        <li>
          <code>(vector-ref ⟨<var>vetor</var>⟩ ⟨<var>n</var>⟩)</code> retorna o
          <math xmlns="http://www.w3.org/1998/Math/MathML">
            <msup>
              <mi>n</mi>
              <mrow class="MJX-TeXAtom-ORD">
                <mtext>ésimo</mtext>
              </mrow>
            </msup>
          </math>
          elemento do vetor.
        </li>
        <li>
          <code
            >(vector-set! ⟨<var>vetor</var>⟩ ⟨<var>n</var>⟩
            ⟨<var>valor</var>⟩)</code
          >
          define o
          <math xmlns="http://www.w3.org/1998/Math/MathML">
            <msup>
              <mi>n</mi>
              <mrow class="MJX-TeXAtom-ORD">
                <mtext>ésimo</mtext>
              </mrow>
            </msup>
          </math>
          elemento do vetor para o valor designado.
        </li>
      </ul>

      <p>
        Por exemplo, se <code>v</code> é um vetor, então
        <code>(vector-ref v 5)</code> obtém a quinta entrada no vetor
        <code>v</code> e <code>(vector-set! v 5 7)</code> altera o valor da
        quinta entrada do vetor <code>v</code> para 7.<a
          class="footnote_link"
          id="DOCF291"
          href="#FOOT291"
          ><sup>291</sup></a
        >
        Para a memória do computador, esse acesso pode ser implementado por meio
        do uso de aritmética de endereço para combinar um
        <a id="index-base-address"></a><em>endereço base</em> que especifica a
        localização inicial de um vetor na memória com um
        <a id="index-index"></a><em>índice</em> que especifica o deslocamento de
        um elemento particular do vetor.
      </p>

      <!-- Continuação da tradução... -->
    </section>
  </body>
</html>
